name: Shared CI

on:
  workflow_call:
    inputs: 
      skip:
        type: boolean
        default: false

jobs:
  # TODO: get mypy running
  shared-lint:
    name: Run Lint (Shared)
    if: ${{ inputs.skip == false }}
    uses: codecov/gha-workflows/.github/workflows/lint.yml@v1.2.31
    with:
      working_directory: libs/shared

  shared-benchmark:
    name: Benchmarks (Shared)
    if: ${{ inputs.skip == false }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: libs/shared
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - uses: astral-sh/setup-uv@v5
      - uses: actions/setup-python@v5
      - run: uv sync --all-extras --dev

      - uses: CodSpeedHQ/action@v3
        with:
          run: uv run --project libs/shared pytest --rootdir=libs/shared libs/shared/tests/benchmarks/ --codspeed
          token: ${{ secrets.CODSPEED_TOKEN }}

  shared-test:
    name: Test (Shared)
    if: ${{ inputs.skip == false }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: libs/shared
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Build test environment
        run: |
          make test_env.build

      - name: Bring containers up
        run: |
          make test_env.up

      - name: Run tests
        run: |
          make test_env.test PYTEST_ROOTDIR=/app

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: shared-coveragefiles
          path: libs/shared/tests/*.coverage.xml

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: shared-junitfiles
          path: libs/shared/tests/*junit*.xml

  shared-upload-to-codecov:
    name: Upload to Codecov (shared)
    if: ${{ inputs.skip == false }}
    needs: [shared-test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - codecov_url_secret: CODECOV_URL
            codecov_token_secret: CODECOV_ORG_TOKEN
            name: prod
          - codecov_url_secret: CODECOV_STAGING_URL
            codecov_token_secret: CODECOV_ORG_TOKEN_STAGING
            name: staging
          - codecov_url_secret: CODECOV_QA_URL
            codecov_token_secret: CODECOV_QA_ORG
            name: qa
          - codecov_url_secret: CODECOV_PUBLIC_QA_URL
            codecov_token_secret: CODECOV_PUBLIC_QA_TOKEN
            name: public qa

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Download coverage
        id: download_coverage
        uses: actions/download-artifact@v4
        with:
          name: shared-coveragefiles

      - name: Download test results
        id: download_test_results
        uses: actions/download-artifact@v4
        with:
          name: shared-junitfiles

      - name: Uploading unit test coverage (${{ matrix.name }})
        uses: codecov/codecov-action@v5
        with:
          files: ${{ steps.download_coverage.outputs.download-path }}/unit.coverage.xml
          flags: shared-docker-uploader
          disable_search: true
          # Strange workaround: API has a `codecov` directory in the repo root
          # which conflicts with the action's `codecov` binary
          use_pypi: true
          token: ${{ secrets[matrix.codecov_token_secret] }}
          url: ${{ secrets[matrix.codecov_url_secret] }}
          recurse_submodules: true

      - name: Uploading unit test results (${{ matrix.name }})
        uses: codecov/test-results-action@v1
        with:
          files: ${{ steps.download_test_results.outputs.download-path }}/unit.junit.xml
          flags: shared-docker-uploader
          disable_search: true
          token: ${{ secrets[matrix.codecov_token_secret] }}
          url: ${{ secrets[matrix.codecov_url_secret] }}
          # The coverage action will have installed codecovcli with pip. The
          # actual binary will be found in $PATH.
          binary: codecovcli
          recurse_submodules: true

  # This job works around a strange interaction between reusable workflows and
  # path filters.
  #
  # When a job that uses a reusable workflow is skipped, a single check shows up
  # for it (e.g. `API CI / Test`). If the job is _not_ skipped, that check does
  # not appear and instead you see checks for all of the jobs nested in the
  # reusable workflow (`API CI / Test / Run tests`). There's no single check
  # that's consistently there which you can mark as required.
  #
  # Because this job does not use a reusable workflow, it will produce the same
  # check whether or not it is skipped. So, we can make this check required and
  # have it figure out whether the jobs we actually care about failed.
  shared-required-checks:
    name: Required checks (Shared)
    if: ${{ !cancelled() && inputs.skip == false }}
    runs-on: ubuntu-latest
    needs: [shared-test, shared-lint]
    steps:
      - name: Fail lint
        if: ${{ needs.shared-lint.result == 'failure' }}
        run: exit 1
      - name: Fail tests
        if: ${{ needs.shared-test.result == 'failure' }}
        run: exit 1
