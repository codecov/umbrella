name: Run Tests

on:
  workflow_call:
    inputs:
      # A stringified JSON object containing a list of projects
      # (worker, codecov-api, shared) for which CI should run.
      changes:
        type: string
        required: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - project: worker
            enabled: ${{ contains(fromJSON(inputs.changes), 'worker') }}
            repo: ${{ vars.CODECOV_WORKER_IMAGE_V2 || vars.CODECOV_WORKER_IMAGE_V2_SELF_HOSTED || 'codecov/self-hosted-worker' }}
            output_directory: apps/worker
            make_target_prefix: worker.
            run_integration: true
            flag_prefix: worker

          - project: codecov-api
            enabled: ${{ contains(fromJSON(inputs.changes), 'codecov-api') }}
            repo: ${{ vars.CODECOV_API_IMAGE_V2 || vars.CODECOV_API_IMAGE_V2_SELF_HOSTED || 'codecov/self-hosted-api' }}
            output_directory: apps/codecov-api
            make_target_prefix: api.
            run_integration: false
            flag_prefix: api

          - project: shared
            enabled: ${{ contains(fromJSON(inputs.changes), 'shared') }}
            repo: codecov/dev-shared
            output_directory: libs/shared
            make_target_prefix: shared.
            run_integration: true
            flag_prefix: shared

    env:
      AR_REPO: ${{ matrix.repo }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Test App
        id: cache-test-app
        uses: actions/cache@v4
        env:
          cache-name: ${{ matrix.repo }}-test-app
        with:
          path: |
            ${{ matrix.output_directory }}/test-app.tar
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}

      - name: Load built image
        run: |
          docker load --input ${{ matrix.output_directory }}/test-app.tar

      - name: Install docker compose
        run: |
          sudo curl -SL https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Bring test env up
        run: |
          make ${{ matrix.make_target_prefix }}test_env.up

      - name: Prepare for tests
        run: |
          make ${{ matrix.make_target_prefix }}test_env.prepare
          make ${{ matrix.make_target_prefix }}test_env.check_db

      - name: Run unit tests
        run: |
          make ${{ matrix.make_target_prefix }}test_env.run_unit PYTEST_ROOTDIR=/app

      - name: Run integration tests
        if: ${{ !cancelled() && matrix.run_integration == true }}
        run: |
          make ${{ matrix.make_target_prefix }}test_env.run_integration PYTEST_ROOTDIR=/app

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: ${{ matrix.flag_prefix }}-coveragefiles
          path: ${{ matrix.output_directory }}/*.coverage.xml

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: ${{ matrix.flag_prefix }}-junitfiles
          path: ${{ matrix.output_directory }}/*junit*.xml

  upload:
    name: Upload to Codecov
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      fail-fast: false
      matrix:
        # We want to upload to four separate Codecov instances
        codecov-instance: [ {url: CODECOV_URL, token: CODECOV_ORG_TOKEN}, {url: CODECOV_STAGING_URL, token: CODECOV_ORG_TOKEN_STAGING}, {url: CODECOV_QA_URL, token: CODECOV_QA_ORG}, {url: CODECOV_PUBLIC_QA_URL, token: CODECOV_PUBLIC_QA_TOKEN} ]
        # For each of those instances, we want to upload separately for each of our projects
        project: [worker, codecov-api, shared]

        # Add some extra information about each project
        include:
          - project: worker
            enabled: ${{ contains(fromJSON(inputs.changes), 'worker') }}
            flag_prefix: worker
            run_integration: true
            output_directory: apps/worker

          - project: codecov-api
            enabled: ${{ contains(fromJSON(inputs.changes), 'codecov-api') }}
            flag_prefix: api
            run_integration: false
            output_directory: apps/codecov-api

          - project: shared
            enabled: ${{ contains(fromJSON(inputs.changes), 'shared') }}
            flag_prefix: shared
            run_integration: true
            output_directory: libs/shared

    steps:
      - name: Checkout
        if: ${{ matrix.enabled }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download coverage
        id: download_coverage
        if: ${{ matrix.enabled }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.flag_prefix }}-coveragefiles

      - name: Download test results
        id: download_test_results
        if: ${{ matrix.enabled }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.flag_prefix }}-junitfiles

      - name: Uploading unit test coverage (${{ matrix.project }})
        if: ${{ matrix.enabled }}
        uses: codecov/codecov-action@v5
        with:
          files: ${{ steps.download_coverage.outputs.download-path }}/unit.coverage.xml
          flags: ${{ format('{0}unit', matrix.flag_prefix) }}
          disable_search: true
          # Strange workaround: API has a `codecov` directory in the repo root
          # which conflicts with the action's `codecov` binary
          use_pypi: true
          token: ${{ secrets[matrix.codecov-instance.token] }}
          url: ${{ secrets[matrix.codecov-instance.url] }}

      - name: Uploading integration test coverage (${{ matrix.project }})
        if: ${{ matrix.enabled && matrix.run_integration == true }}
        uses: codecov/codecov-action@v5
        with:
          files: ${{ steps.download_coverage.outputs.download-path }}/integration.coverage.xml
          flags: ${{ format('{0}integration', matrix.flag_prefix) }}
          disable_search: true
          # Strange workaround: API has a `codecov` directory in the repo root
          # which conflicts with the action's `codecov` binary
          use_pypi: true
          token: ${{ secrets[matrix.codecov-instance.token] }}
          url: ${{ secrets[matrix.codecov-instance.url] }}

      - name: Uploading unit test results (${{ matrix.project }})
        if: ${{ matrix.enabled }}
        uses: codecov/test-results-action@v1
        with:
          files: ${{ steps.download_test_results.outputs.download-path }}/unit.junit.xml
          flags: ${{ format('{0}unit', matrix.flag_prefix) }}
          disable_search: true
          token: ${{ secrets[matrix.codecov-instance.token] }}
          url: ${{ secrets[matrix.codecov-instance.url] }}
          # The coverage action will have installed codecovcli with pip. The
          # actual binary will be found in $PATH.
          binary: codecovcli
          working-directory: ${{ matrix.output_directory }}

      - name: Uploading integration test results (${{ matrix.project }})
        if: ${{ matrix.enabled && matrix.run_integration == true }}
        uses: codecov/test-results-action@v1
        with:
          files: ${{ steps.download_test_results.outputs.download-path }}/integration.junit.xml
          flags: ${{ format('{0}integration', matrix.flag_prefix) }}
          disable_search: true
          token: ${{ secrets[matrix.codecov-instance.token] }}
          url: ${{ secrets[matrix.codecov-instance.url] }}
          # The coverage action will have installed codecovcli with pip. The
          # actual binary will be found in $PATH.
          binary: codecovcli
          working-directory: ${{ matrix.output_directory }}
