# syntax=docker/dockerfile:1.4
ARG PYTHON_IMAGE=ghcr.io/astral-sh/uv:python3.13-bookworm-slim

ARG APP_DIR

# BUILD STAGE
FROM $PYTHON_IMAGE as build

ARG APP_DIR

# Install all system packages needed by either worker OR codecov-api
RUN apt-get update
RUN apt-get install -y \
    build-essential \
    libffi-dev \
    libpq-dev \
    libxml2-dev \
    libxslt-dev \
    git \
    curl

# Install the Rust toolchain which we need to build test-results-parser
ARG RUST_VERSION=stable
ENV RUST_VERSION=${RUST_VERSION}
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs \
    | bash -s -- -y --profile minimal --default-toolchain $RUST_VERSION
ENV PATH="/root/.cargo/bin:$PATH"

ENV UV_LINK_MODE=copy \
    UV_COMPILE_BYTECODE=1 \
    UV_PYTHON_DOWNLOADS=never \
    UV_PYTHON=python \
    UV_PROJECT_ENVIRONMENT=/app

# Export a requirements.txt
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=${APP_DIR}/pyproject.toml,target=${APP_DIR}/pyproject.toml \
    --mount=type=bind,source=${APP_DIR}/uv.lock,target=${APP_DIR}/uv.lock \
    --mount=type=bind,source=libs/shared,target=libs/shared \
    uv --directory ${APP_DIR} export --no-hashes --frozen --format requirements-txt > requirements.txt

# The resulting requirements.txt includes ourselves as a dependency we should install
# "editably". Filter that out, leaving only external dependencies.
RUN grep -v '^-e ' requirements.txt > requirements.remote.txt

# Fetch/build wheels for all external dependencies.
RUN --mount=type=bind,source=libs/shared,target=libs/shared \
    (cd ${APP_DIR} && pip wheel -w /wheels --find-links /wheels -r /requirements.remote.txt)

# Build a wheel for ourselves
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=${APP_DIR}/pyproject.toml,target=${APP_DIR}/pyproject.toml \
    --mount=type=bind,source=${APP_DIR}/uv.lock,target=${APP_DIR}/uv.lock \
    --mount=type=bind,source=libs/shared,target=libs/shared \
    uv build --directory ${APP_DIR} --all-packages --wheel -o /wheels

# RUNTIME STAGE
FROM $PYTHON_IMAGE

ARG APP_DIR

RUN apt-get update
RUN apt-get install -y \
    libxml2-dev \
    libxslt-dev \
    libpq-dev \
    libexpat1 \
    make

COPY --from=build /wheels/ /wheels/

RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=${APP_DIR}/pyproject.toml,target=${APP_DIR}/pyproject.toml \
    --mount=type=bind,source=${APP_DIR}/uv.lock,target=${APP_DIR}/uv.lock \
    --mount=type=bind,source=libs/shared,target=libs/shared \
    uv --directory ${APP_DIR} pip install --no-deps --no-index --find-links=/wheels /wheels/* --system

RUN addgroup --system application \
    && adduser --system codecov --ingroup application --home /home/codecov

