ARG PYTHON_IMAGE=ghcr.io/astral-sh/uv:python3.13-bookworm-slim

# Build stage:
# builds all the dependencies, including Rust packages
FROM $PYTHON_IMAGE AS build
WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    libffi-dev \
    libxml2-dev \
    libxslt-dev

# Install Rust compiler
ARG RUST_VERSION=stable
ENV RUST_VERSION=${RUST_VERSION}
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs \
    | bash -s -- -y --profile minimal --default-toolchain $RUST_VERSION
ENV PATH="/root/.cargo/bin:$PATH"

# Configure uv builds
ENV UV_LINK_MODE=copy \
UV_COMPILE_BYTECODE=1 \
UV_PYTHON_DOWNLOADS=never \
UV_PYTHON=python

# Install python dependencies
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    --mount=type=bind,source=libs/shared/pyproject.toml,target=libs/shared/pyproject.toml \
    --mount=type=bind,source=apps/codecov-api/pyproject.toml,target=apps/codecov-api/pyproject.toml \
    --mount=type=bind,source=apps/worker/pyproject.toml,target=apps/worker/pyproject.toml \
    uv sync --frozen --no-dev --no-install-workspace --no-editable

# Copy the project into the intermediate image
ADD . /app

# Sync the project
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev --no-editable

# Base stage:
# Copies the actually installed workspace to a minimal runner image
FROM $PYTHON_IMAGE AS base
WORKDIR /app

COPY --from=build --chown=app:app /app /app

# Test stage:
# Based on the `base` stage, installs all the dev-dependencies to be able to run tests
FROM base AS test

ENV UV_LINK_MODE=copy

# Install all dev-dependencies
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen

# Add the venv to the PATH
ENV PATH="/app/.venv/bin:$PATH"
