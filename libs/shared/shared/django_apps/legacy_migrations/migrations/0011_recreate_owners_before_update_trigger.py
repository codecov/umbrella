# Generated by Django 4.2.20 on 2025-07-04 15:29

from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ("legacy_migrations", "0010_drop_owners_repos_triggers"),
        ("codecov_auth", "0073_alter_owner_username_alter_user_email"),
        ("core", "0072_alter_repository_name"),
    ]

    operations = [
        migrations.RunSQL(
            # Overwrite the existing owners procedure so that new.username is
            # not cast to citext (corresponding to the field update). Then,
            # recreate the triggers for owners and repos afterwards.
            sql="""
                CREATE OR REPLACE FUNCTION owners_before_insert_or_update() RETURNS TRIGGER AS $$
                BEGIN
                    -- user has changed name or deleted and invalidate sessions
                    WITH _owners AS (UPDATE owners
                                    SET username = null
                                    WHERE service = new.service
                                    AND username = new.username
                                    RETURNING ownerid)
                    DELETE FROM sessions WHERE ownerid IN (SELECT ownerid FROM _owners);
                    RETURN new;
                END;
                $$ LANGUAGE plpgsql;

                CREATE TRIGGER owners_before_update BEFORE UPDATE ON owners
                FOR EACH ROW
                WHEN (new.username IS NOT NULL AND new.username IS DISTINCT FROM old.username)
                EXECUTE PROCEDURE owners_before_insert_or_update();

                CREATE TRIGGER repos_before_update BEFORE UPDATE ON repos
                FOR EACH ROW
                WHEN (new.name IS NOT NULL AND new.name IS DISTINCT FROM old.name)
                EXECUTE PROCEDURE repos_before_insert_or_update();
                """,
            reverse_sql="""
                DROP TRIGGER IF EXISTS repos_before_update ON repos;
                DROP TRIGGER IF EXISTS owners_before_update ON owners;

                CREATE OR REPLACE FUNCTION owners_before_insert_or_update() RETURNS TRIGGER AS $$
                BEGIN
                    -- user has changed name or deleted and invalidate sessions
                    WITH _owners AS (UPDATE owners
                                    SET username = null
                                    WHERE service = new.service
                                    AND username = new.username::citext
                                    RETURNING ownerid)
                    DELETE FROM sessions WHERE ownerid IN (SELECT ownerid FROM _owners);
                    RETURN new;
                END;
                $$ LANGUAGE plpgsql;
            """,
        ),
    ]
